import asyncio
import traceback
import traceback
import os
import urllib.request
import random
from random import randint
import re
import asyncio

import command_besed
from commands import commands
from photos import text_photo
from record_achievements import achievements


class RegexpProc(object):

    PATTERN_1 = r''.join((
        r'\w{0,5}[—Öx]([—Öx\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[—Éy]([—Éy\s\!@#\$%\^&*+-\|\/]{0,6})[—ëi–ªe–µ—é–∏–π—è]\w{0,7}|\w{0,6}[–øp]',
        r'([–øp\s\!@#\$%\^&*+-\|\/]{0,6})[i–∏–µ]([i–∏–µ\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[3–∑—Å]([3–∑—Å\s\!@#\$%\^&*+-\|\/]{0,6})[–¥d]\w{0,10}|[—Åcs][—Éy]',
        r'([—Éy\!@#\$%\^&*+-\|\/]{0,6})[4—ák–∫]\w{1,3}|\w{0,4}[b–±]',
        r'([b–±\s\!@#\$%\^&*+-\|\/]{0,6})[l–ª]([l–ª\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[y—è]\w{0,10}|\w{0,8}[–µ—ë][b–±][–ª—Å–∫–µ@e—ã–∏–∞a][–Ω–∞–∏@–π–≤–ª]\w{0,8}|\w{0,4}[–µe]',
        r'([–µe\s\!@#\$%\^&*+-\|\/]{0,6})[–±b]([–±b\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[u—É]([u—É\s\!@#\$%\^&*+-\|\/]{0,6})[–Ω4—á]\w{0,4}|\w{0,4}[–µe—ë]',
        r'([–µe—ë\s\!@#\$%\^&*+-\|\/]{0,6})[–±b]([–±b\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[–Ωn]([–Ωn\s\!@#\$%\^&*+-\|\/]{0,6})[—Éy]\w{0,4}|\w{0,4}[–µe]',
        r'([–µe\s\!@#\$%\^&*+-\|\/]{0,6})[–±b]([–±b\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[–æo–∞a@]([–æo–∞a@\s\!@#\$%\^&*+-\|\/]{0,6})[—Çn–Ωt]\w{0,4}|\w{0,10}[—ë]',
        r'([—ë\!@#\$%\^&*+-\|\/]{0,6})[–±]\w{0,6}|\w{0,4}[p–ø]',
        r'([p–ø\s\!@#\$%\^&*+-\|\/]{0,6})[–∏e–µi]([–∏e–µi\s\!@#\$%\^&*+-\|\/]{0,6})',
        r'[–¥d]([–¥d\s\!@#\$%\^&*+-\|\/]{0,6})[o–æ–∞a@–µe–∏i]',
        r'([o–æ–∞a@–µe–∏i\s\!@#\$%\^&*+-\|\/]{0,6})[—Är]\w{0,12}',
    ))

    PATTERN_2 = r'|'.join((
        r"(\b[—Ås]{1}[—Ås—Ü]{0,1}[u—Éy](?:[—á4]{0,1}[–∏–∞ak–∫][^—Ü])\w*\b)",
        r"(\b(?!–ø–ª–æ|—Å—Ç—Ä–∞|[—Ç–ª]–∏)(\w(?!(—É|–ø–ª–æ)))*[—Öx][—Éy](–π|–π–∞|[–µe—ë]|–∏|—è|–ª–∏|—é)(?!–≥–∞)\w*\b)",
        r"(\b(–ø[o–æ]|[–Ω–∑][–∞a])*[—Öx][e–µ][—Äp]\w*\b)",
        r"(\b[–ºm][—Éy][–¥d]([–∞a][–∫k]|[o–æ]|–∏)\w*\b)",
        r"(\b\w*–¥[—Äp](?:[o–æ][—á4]|[–∞a][—á4])(?!–ª)\w*\b)",
        r"(\b(?!(?:–∫–∏–ª–æ)?[—Ç–º]–µ—Ç)(?!—Å–º–æ)[–∞-—èa-z]*(?<!—Å)—Ç[—Äp][–∞a][—Öx]\w*\b)",
        r"(\b[–∫|k][–∞ao–æ][–∑3z]+[e–µ]?—ë?–ª\w*\b)",
        r"(\b(?!—Å–æ)\w*–ø[–µe—ë]—Ä[–Ω–¥](–∏|–∏c|—ã|—É|–Ω|–µ|—ã)\w*\b)",
        r"(\b\w*[–±–ø][—Å—Å–∑]–¥\w+\b)",
        r"(\b([–Ωn–ø][–∞a]?[–æo]?[x—Ö])\b)",
        r"(\b([–∞a]?[–æo]?[–Ωn–ø–±–∑][–∞a]?[–æo]?)?([c—Å][p—Ä][–∞a][^–∑–∂–±—Å–≤–º])\w*\b)",
        r"(\b\w*([–æo]—Ç|–≤—ã|[—Äp]–∏|[–æo]|–∏|[—Éy]){0,1}([–øn—Äp][i–∏–µe—ë]{0,1}[3z–∑—Åcs][–¥d])\w*\b)",
        r"(\b(–≤—ã)?—É?[–µe—ë]?–±–∏?–ª—è[–¥—Ç]?[—é–æo]?\w*\b)",
        r"(\b(?!–≤–µ–ª–æ|—Å–∫–∏|—ç–Ω)\w*[–øpp][e–µ–∏i][–¥d][oa–æ–∞–µe–∏—Äp](?![—Ü—è–Ω–≥—é—Å–º–π—á–≤])[—Äp]?(?![–ª—Ç])\w*\b)",
        r"(\b(?!–≤?[—Å—Ç]{1,2}–µ–±)(?:(?:–≤?[—Åc–∑3–æ][—Ç—èa–∞]?[—å—ä]?|–≤—ã|–ø[—Äp][–∏–æo]|[—Éy]|—Ä[a–∞][–∑3z][—å—ä]?|–∫[–æo]–Ω[–æo])?[–µ—ë]–±[–∞-—èa-z]*)|(?:[–∞-—èa-z]*[^—Ö–ª—Ä–¥–≤][–µe—ë]–±)\b)",
        r"(\b[–∑3z][–∞a–æo]–ª[—Éy]–ø[–∞ae–µ–∏–Ω]\w*\b)",
    ))

    regexp = re.compile(PATTERN_1, re.U | re.I)

    @staticmethod
    def test(text):
        return bool(RegexpProc.regexp.findall(text))

    @staticmethod
    def replace(text, repl='[censored]'):
        return RegexpProc.regexp.sub(repl, text)

    @staticmethod
    def wrap(text, wrap=('<span style="color:red;">', '</span>',)):
        words = {}
        for word in re.findall(r'[–ê-—èA-z0-9\-]+', text):
            if len(word) < 3:
                continue
            if RegexpProc.regexp.findall(word):
                words[word] = u'%s%s%s' % (wrap[0], word, wrap[1],)
        for word, wrapped in words.items():
            text = text.replace(word, wrapped)
        return text


class message_analysis(commands):

    async def downland_photo(self, g_url, rand_name):
        urllib.request.urlretrieve(g_url, rand_name)

    async def run(self, bad_words):
        try:
            if self.peer_id == 2000000024:
                return

            type_sms = "text"
            res = await achievements(int(self.from_id), self.v).add_sms(self.apis, self.peer_id, type_sms)
            if res:
                await self.apis.api_post("messages.send", v=self.v, peer_id=self.peer_id,
                                         message=res, random_id=0, forward=self.answer_msg())






            kol_sms = await self.create_mongo.profile_users_add(self.from_id, sms=1)
            if kol_sms in self.sms_awards:
                res = await self.create_mongo.profile_users_add(self.from_id, f"üèÜ {self.sms_awards[int(kol_sms)][0]}",
                                                                self.sms_awards[int(kol_sms)][1])
                ach = f"üëª [id{self.from_id}|–í—ã] –ø–æ–ª—É—á–∏–ª–∏ –∞—á–∏–≤–∫—É:\n\nüèÜ {self.sms_awards[int(kol_sms)][0]}\n\nüìä –†–µ–π—Ç–∏–Ω–≥: {res[1]}"
                await self.apis.api_post("messages.send", v=self.v, peer_id=self.peer_id,
                                         message=ach, random_id=0, forward=self.answer_msg())
            flag = False
            flag_new = False
            for i in bad_words:
                for j in self.text.lower().split(" "):

                    if not flag_new:
                        if RegexpProc.test(j):
                            flag_new = True
                    if i in self.text.lower():
                        if i == j:
                            flag = True
                            break
            if not flag:
                try:
                    adm = await self.create_mongo.admin_check(self.from_id, self.peer_id)
                    if not adm:
                        if len(self.message["attachments"]) != 0:
                            for i in self.message["attachments"]:
                                if "photo" in i:
                                    rand = randint(0, 9999999999)
                                    rand_name = f"{self.peer_id}_{self.from_id}_{self.date}_{rand}.jpg"
                                    g = await self.photo_r_json(i["photo"]["sizes"])
                                    g_url = g["url"]
                                    await self.downland_photo(g_url, rand_name)
                                    # urllib.request.urlretrieve(g_url, rand_name)
                                    txt = await text_photo().run(rand_name)
                                    os.remove(rand_name)
                                    for i in bad_words:
                                        for j in txt.lower().split(" "):
                                            if not flag_new:
                                                if RegexpProc.test(j):
                                                    flag_new = True
                                            if i in txt.lower():
                                                if i == j:
                                                    flag = True
                                                    break
                                    if flag:
                                        break
                except Exception as e:
                    print(traceback.format_exc())
            if flag:
                adm = await self.create_mongo.admin_check(self.from_id, self.peer_id)
                try:
                    if not adm:
                        vrem = 86400
                        cause = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏"
                        ply = await self.display_time(vrem)
                        result = await warn_give_out(self.v).ban_give(self.apis, self.create_mongo, self.peer_id, cause,
                                                                      self.chat_id(), str(self.from_id), "-5411326",
                                                                      vrem, ply)

                        await self.apis.api_post("messages.send", v=self.v, peer_id=self.peer_id,
                                                 message=result[1], random_id=0, forward=self.answer_msg())

                        if len(result) == 3:
                            loop = asyncio.get_running_loop()
                            for i in result[2]:
                                try:
                                    loop.create_task(
                                        self.apis.api_post("messages.removeChatUser", chat_id=self.chat_id_param(i),
                                                           member_id=self.from_id,
                                                           v=self.v))
                                except:
                                    pass
                            return

                        if result[0]:
                            await self.apis.api_post("execute", code=kick(users=[self.from_id], chat_id=self.chat_id()),
                                                     v=self.v)
                except Exception as e:
                    print(traceback.format_exc())

            elif flag_new:
                adm = await self.create_mongo.admin_check(self.from_id, self.peer_id)
                if not adm:
                    result = await self.apis.api_post("messages.getConversationsById", v=self.v,
                                                      peer_ids=str(self.peer_id))
                    name = result["items"][0]['chat_settings']['title']
                    # result_id = await self.apis.api_post("messages.getByConversationMessageId", v=self.v,
                    # peer_id=self.peer_id,
                    # conversation_message_ids=[self.conversation_message_id])
                    # print(result_id)
                    # m_id = result_id["items"][0]["id"]
                    await self.apis.api_post("messages.send", v=self.v, peer_id=2000000024,
                                             message=f"‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ [id{self.from_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n\n"
                                                     f"üë• –ë–µ—Å–µ–¥–∞: '{name}'\n\n"
                                                     f"–ó–∞–≤–∞—Ä–Ω–∏—Ç—å?",
                                             random_id=0, keyboard=self.keyboard_warn(
                            f"{self.from_id}@{self.date}@{self.conversation_message_id}"),
                                             forward=self.answer_msg_other())
                    await self.create_mongo.add_users_zawarn(self.from_id, self.date, self.peer_id)
        except Exception as e:
            print(traceback.format_exc())


message_analysiss = command_besed.Command()

message_analysiss.keys = [' ']
message_analysiss.description = '–í—ã–¥–∞—á–∞ –±–∞–Ω–∞'
message_analysiss.set_dictionary('ban')
message_analysiss.mandatory = True
message_analysiss.process = message_analysis
message_analysiss.topics_blocks = []
message_analysiss.topics_resolution = ["tema1"]
