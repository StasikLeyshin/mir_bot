# -*- coding: utf-8 -*-
import asyncio
import json
import ujson
import random

from api.api import api
from api.api_execute import mailing
from edite_text import opredel_skreen, chunks

class methods:

    def __init__(self, v, club_id):

        self.v = v
        self.club_id = club_id

    async def admin_chek(self, peer_id, from_id, apis):
        response = await apis.api_get("messages.getConversationMembers", peer_id=peer_id, v=self.v)
        if "error" not in response:
            for element in response["items"]:
                if "is_admin" in element:
                    if element["is_admin"] is True and from_id == element["member_id"]:
                        return 1
            return 0
        return -1

    async def users_chek(self, peer_id, apis):
        response = await apis.api_get("messages.getConversationMembers", peer_id=peer_id, v=self.v)
        if "error" not in response:
            users = {}
            users_vse = []
            users_adm = []
            for element in response["items"]:
                if "is_admin" in element:
                    if element["is_admin"] is True:
                        users[element["member_id"]] = {"admin": True}
                        users_adm.append(element["member_id"])
                        #users.append({"user_id": element["member_id"], "admin": True})
                        users_vse.append(element["member_id"])
                else:
                    users[element["member_id"]] = {"admin": False}
                    #users.append({"user_id": element["member_id"], "admin": False})
                    users_vse.append(element["member_id"])

            return users, users_vse, users_adm
        return False



class messages_edit:

    def __init__(self, v, club_id, apis, peer_id, text):

        self.v = v
        self.club_id = club_id
        self.apis = apis
        self.text = text
        self.peer_id = peer_id
        self.masg = 0


    async def start_send(self):

        self.msg = await self.apis.api_post("messages.send", v=self.v, peer_id=self.peer_id, message=self.text, random_id=0)

        return

    async def finish(self, new_text):

        await self.apis.api_post("messages.edit", v=self.v, peer_id=self.peer_id, message=new_text, random_id=0, message_id=self.msg)
        return

    async def del_sms(self):
        #d = await self.apis.api_post("messages.getByConversationMessageId", v=self.v, peer_id=self.peer_id, conversation_message_ids=conversation_message_id)
        #print(d["items"][0]["id"])
        #await self.apis.api_post("messages.delete", v=self.v, message_ids=f"{self.msg}, {d['items'][0]['id']}", delete_for_all=1)
        await self.apis.api_post("messages.delete", v=self.v, message_ids=self.msg, delete_for_all=1)
        return



class collecting_list_users:

    def __init__(self, v, club_id):

        self.v = v
        self.club_id = club_id


    async def run(self, users_old, apis, question, question_id):

        ran = ["üåù –í–æ–ø—Ä–æ—Å –¥–Ω—è –∏ —É–∂–µ —É —Ç–µ–±—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, —Å–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π!",
               "üëæ –ù–æ–≤—ã–π –¥–µ–Ω—å, –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∏ —ç—Ç–æ –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–±–µ —É–∂–µ —Å–µ–π—á–∞—Å, –º–æ–∂–µ—à—å —É–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å:)",
               "üåö –£—Ç—Ä–æ –ø–æ–∑–¥–Ω–µ–µ, —É—Ç—Ä–æ —Ä–∞–Ω–Ω–µ–µ, –∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ —É–∂–µ —É —Ç–µ–±—è)",
               "üëª –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å! –ë–µ–≥–æ–º –æ—Ç–≤–µ—á–∞—Ç—å!"
               ]
        users = await chunks(users_old, 100)
        for i in users:
            users_25 = await chunks(i, 25)
            new_users = []
            for j in users_25:
                #j_int = [int(i) for i in j]
                new_use = await apis.api_post("execute", code=mailing(v=self.v, users=j, group_id=int(self.club_id)), v=self.v)
                print(555, new_use)
                new_users = new_users + new_use
            print(new_users)
            await apis.api_post("messages.send", v=self.v, peer_ids=",".join(new_users),
                                message=f"{random.choice(ran)}\n\n"
                                f"{question}\n\n"
                                f"‚ö† –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ /–æ—Ç–≤–µ—Ç –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—à –æ—Ç–≤–µ—Ç\n\n"
                                f"‚ùó–ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {question_id}",
                                random_id=0)

