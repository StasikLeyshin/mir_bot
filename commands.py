# -*- coding: utf-8 -*-
import asyncio
import json
import pprint
import re
import time
from datetime import datetime
import traceback


from api.methods import methods
from api import api_url
from api.api_execute import inf_lot
from record_achievements import record_achievements
from command_ls import command_ls_dictionary, command_ls_list


class commands:

    def __init__(self, v, club_id, message, apis, them, create_mongo, collection_bots, document_tokens, url_dj,
                 client=None, tree_questions=None, mongo_manager=None, settings_info=None):

        self.v = v
        self.club_id = club_id
        self.message = message
        self.peer_id = self.message["peer_id"]
        self.from_id = self.message["from_id"]
        self.date = self.message["date"]
        self.id_sms = self.message["id"]
        self.text = self.message["text"]
        self.conversation_message_id = self.message["conversation_message_id"]
        self.message_id = self.message["id"]
        self.fwd_messages = self.message["fwd_messages"]
        self.attachments = self.message["attachments"]
        self.methods = methods(self.v, self.club_id)
        self.apis = apis
        self.them = them
        self.create_mongo = create_mongo
        self.collection_bots = collection_bots
        self.document_tokens = document_tokens
        self.url_dj = url_dj
        self.client = client
        self.tree_questions = tree_questions
        self.mongo_manager = mongo_manager
        self.settings_info = settings_info
        self.admin_list = [15049950, 216758639, 597624554]
        #self.admin_list = [597624554, 516659275]
        #self.admin_list = [597624554, 456204202]
        self.subjects = {
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –∏–Ω—Ñ": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –†—É—Å—Å–∫–∏–π –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ñ–∏–∑": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –†—É—Å—Å–∫–∏–π –§–∏–∑–∏–∫–∞",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ö–∏–º": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –†—É—Å—Å–∫–∏–π –•–∏–º–∏—è",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –æ–±—â": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –†—É—Å—Å–∫–∏–π –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
            "–†—É—Å + –æ–±—â + –∏—Å—Ç": "–†—É—Å—Å–∫–∏–π –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –ò—Å—Ç–æ—Ä–∏—è",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ç–≤–æ—Ä": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –†—É—Å—Å–∫–∏–π –¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω",
            "–†—É—Å + –æ–±—â + —Ç–≤–æ—Ä": "–†—É—Å—Å–∫–∏–π –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω"
        }

        self.subjects_opposite = {
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –∏–Ω—Ñ": "math&rus&info",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ñ–∏–∑": "math&rus&phys",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ö–∏–º": "math&rus&chem",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –æ–±—â": "math&rus&soc",
            "–†—É—Å + –æ–±—â + –∏—Å—Ç": "rus&soc&hist",
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ç–≤–æ—Ä": "math&rus&art",
            "–†—É—Å + –æ–±—â + —Ç–≤–æ—Ä": "rus&soc&art"
        }
        self.subjects_opposite_id = {
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –∏–Ω—Ñ": [1, 18, 3],
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ñ–∏–∑": [1, 18, 2],
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ö–∏–º": [1, 18, 7],
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –æ–±—â": [1, 18, 4],
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –≥–µ–æ": [1, 18, 19],
            "–†—É—Å + –∏–Ω—Ñ + –≥–µ–æ": [1, 3, 19],
            "–†—É—Å + –æ–±—â + –∏—Å—Ç": [1, 4, 5],
            "–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ç–≤–æ—Ä": [1, 6],
            "–†—É—Å + –æ–±—â + —Ç–≤–æ—Ä": [1, 4, 6]

        }

        self.sms_awards = {
            100: ["–£—É—Ñ, —Å–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —É –Ω–∞—Å –ª—é–±–∏—Ç–µ–ª—å –ø–æ—á–∞—Ç–∏—Ç—å—Å—è", 2],
            1000: ["–û–≥–æ, —Ç—ã—Å—è—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—â–µ –Ω–µ —Ñ–ª—É–¥–µ—Ä –≥–æ–¥–∞, –Ω–æ –≤—Å—ë –≤–ø–µ—Ä–µ–¥–∏", 6],
            2000: ["That's a lot of masseges! How abount a little more? –î–≤–µ —Ç—ã—Å—è—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω–æ!", 9],
            5000: ["–ì–õ–ê–í–ù–´–ô –§–õ–£–î–ï–† –ì–û–î–ê –ù–ê–ô–î–ï–ù! –ü–Ø–¢–¨ –¢–´–°–Ø–ß –°–û–û–ë–©–ï–ù–ò–ô –ï–°–¢–¨!", 12],
            10000: ["–î–ï–°–Ø–¢–¨ –¢–´–°–Ø–ß –°–û–û–ë–©–ï–ù–ò–ô!!! –î–ï–°–Ø–Ø–Ø–Ø–Ø–¢–¨! –ù–ê–°–ü–ê–ú–ò–õ –ù–ê –ë–ï–ó–ë–ï–î–ù–£–Æ –ñ–ò–ó–ù–¨", 15],
            20000: ["–¢–´ –ß–ï–í–û –î–ï–õ–ê–ï–®–¨, –¢–´ –ß–¢–û, –ë–û–ì–ê–¢–´–†–¨ –ß–¢–û –õ–ò, –ö–£–î–ê –°–¢–û–õ–¨–ö–û, –ö–£–î–ê??????", 20],
            30000: ["–¢–´ –ß–ï–ì–û –¢–£–¢ –î–ï–õ–ê–ï–®–¨? –≤—ã–π–¥–∏ —Ç—Ä–∞–≤—É –ø–æ—Ç—Ä–æ–≥–∞–π, –≤ –∑–ª–∞—Ö —Å—Ö–æ–¥–∏, –∂–µ–Ω—É –ø–æ–≥–ª–∞–¥—å, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –≤ —á–∞—Ç–µ —Å–∏–¥–µ—Ç—å.", 40],
            50000: ["–≠–¢–û–¢ –ß–ï–õ–û–í–ï–ö –°–ü–ê–ú–ï–†. –û–§–ò–¶–ò–ê–õ–¨–ù–û!", 50]
        }
        self.reputation_plus_awards = {
            1: ["–ê –≤—ã, —è –ø–æ–≥–ª—è–∂—É, —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—ã–π", 1],
            5: ["–î–æ–±—Ä—ã–π —á–µ–ª, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", 3],
            10: ["–ü–æ–¥–Ω—è–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é —É–∂–µ –¥–µ—Å—è—Ç–∏ –°–∏-–î–∂–µ—è–º!", 6],
            50: ["–†–µ–ø—É—Ç–∞—Ü–∏—è –Ω–µ –ø–∞–ª–∫–∞: –≤ —Ä—É–∫–∏ –Ω–µ –≤–æ–∑—å–º—ë—à—å, –∞ –≤—ã –≤–∑—è–ª–∏... 50 —Ä–∞–∑", 9],
            200: ["–¢–´ –ü–û–¢–†–Ø–°–ê–Æ–©–ò–ô üëâüèªüëàüèª", 12]
        }
        self.reputation_minus_awards = {
            1: ["–¢–æ–∫—Å–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω", -0.001],
            2: ["–ó–ª–æ–π —á–µ–ª, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π", -0.01],
            5: ["–°–∞–º—ã–π –¥—É—à–Ω—ã–π –≤ —á–∞—Ç–µ", -0.02],
            7: ["–ù—É –¥–∞–≤–∞–π, –¥–∞–≤–∞–π, –Ω–∞–ø–∞–¥–∞–π", -0.04],
            9: ["–Ø –≤–µ–¥—å –Ω–µ –æ—Ç—Å—Ç–∞–Ω—É, –∫–∞–∂–¥–æ–º—É —Ç–æ–∫—Å–∏–∫—É –ø–æ –ø–µ—Ä–µ–≤–æ—Å–ø–∏—Ç–∞–Ω–∏—é", -0.06],
            10: ["–í–æ—Ç —ç—Ç–æ —Ç—ã –∫–æ–Ω–µ—á–Ω–æ –Ω–∞—Ç–æ–∫—Å–∏—á–∏–ª", -0.07],
            13: ["–°–∂—ë–≥ —Ä–µ–π—Ç–∏–Ω–≥ —É–∂–µ —Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–∏ –ª—é–¥—è–º", -0.08],
            16: ["–¢–æ–∫—Å–∏–º —Ç–æ–∫—Å–∏–º —Ç–æ–∫—Å–∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", -0.09],
            20: ["–ü–∞—Ä—Ç–∏—è –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞ –≤–∞–º–∏, –º–∏–Ω—É—Å —Ç–∞—Ä–µ–ª–∫–∞ —Ä–∏—Å", -0.1],
            30: ["–¢–†–ò–¶–ê–¢–û–ß–ö–ê, –¢–†–ò –ò –¶–ê–¢–û–ß–ö–ê, –¢–û–ö–°–ò–ö –í–°–ï–• –¢–û–ö–°–ò–ö–û–í –ù–ê–ô–î–ï–ù", -0.11]
        }
        self.roulette_awards = {
            1: ["üî´ –£–≥–∞–¥–∞–π –∫—É–¥–∞ —è —à–º–∞–ª—å–Ω—É", 0.5],
            3: ["üí• –ù–ê–¢–ê–õ–¨–Ø –ú–û–†–°–ö–ê–Ø –ü–ï–•–û–¢–ê", 1.666],
            5: ["‚òÄ It's high noon", 2.333],
            7: ["‚ò† –°–∞–º—ã–π –º–µ—Ç–∫–∏–π —Å—Ç—Ä–µ–ª–æ–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–∏—Ä–µ", 6.666],
            10: ["üé≤ –õ—é–±–∏–º—á–∏–∫ –§–æ—Ä—Ç—É–Ω—ã", 7.777]
        }

        self.direction_id = {
                                "IT –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": 1,
                                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è/–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": 2,
                                "–•–∏–º–∏—è –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è": 3,
                                "–†–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 4,
                                "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è": 5,
                                "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": 6,
                                "–î–∏–∑–∞–π–Ω": 7,
                                "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è": 8
        }
        self.strategic_directions_id = {
            "IT –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": 1,
            "–•–∏–º–∏—è –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è": 2,
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è/–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": 3,
            "–†–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": 4,
            "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è": 5,
            "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": 6,
            "–î–∏–∑–∞–π–Ω": 7,
            "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è": 8

        }

        self.event_id = {
            "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã": 1,
            "–õ–µ–∫—Ü–∏–∏": 2,
            "–≠–∫—Å–∫—É—Ä—Å–∏–∏": 3,
            "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã": 6,
            "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–µ —Å—É–±–±–æ—Ç—ã": 7,
            "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ò–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π": 14,
            "–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π": 15,
            "–û–ª–∏–º–ø–∏–∞–¥—ã": 16

        }

        self.choice_focus_open_day_id = {'–í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã': ['https://priem.mirea.ru/lk/api/events/get/295',
                                                           'https://priem.mirea.ru/lk/api/events/get/296',
                                                           'https://priem.mirea.ru/lk/api/events/get/303',
                                                           'https://priem.mirea.ru/lk/api/events/get/304',
                                                           'https://priem.mirea.ru/lk/api/events/get/306'
                                                           ],
                                         'IT –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö': ['https://priem.mirea.ru/lk/api/events/get/298',
                                                                'https://priem.mirea.ru/lk/api/events/get/299',
                                                                'https://priem.mirea.ru/lk/api/events/get/302'
                                                                ],
                                         '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–±–æ—Ä–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ': ['https://priem.mirea.ru/lk/api/events/get/299'],
                                         '–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞': ['https://priem.mirea.ru/lk/api/events/get/299'],
                                         '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': ['https://priem.mirea.ru/lk/api/events/get/301'],
                                         '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è': ['https://priem.mirea.ru/lk/api/events/get/299',
                                                           'https://priem.mirea.ru/lk/api/events/get/301'],
                                         '–•–∏–º–∏—è –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['https://priem.mirea.ru/lk/api/events/get/300',
                                                                   'https://priem.mirea.ru/lk/api/events/get/302'],
                                         '–†–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['https://priem.mirea.ru/lk/api/events/get/302'],
                                         '–î–∏–∑–∞–π–Ω': ['https://priem.mirea.ru/lk/api/events/get/302'],
                                         '–ö–æ–ª–ª–µ–¥–∂': ['https://priem.mirea.ru/lk/api/events/get/297',
                                                     'https://priem.mirea.ru/lk/api/events/get/305']
                                         }
        self.place = {'–º–æ—Å–∫–≤–∞': '1', '—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å': '2', '—Ñ—Ä—è–∑–∏–Ω–æ': '3'}

        self.level = {'–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç': '1', '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞': '3', '–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞': '4'}

    def button_vk(self, label, color, payload=""):
        return {
            "action": {
                "type": "text",
                "payload": json.dumps(payload),
                "label": label
            },
            "color": color
        }

    def menu_mirea(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                #[self.button_vk(label="–í–æ–ø—Ä–æ—Å—ã", color="positive"), self.button_vk(label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", color="positive")],
                #[self.button_vk(label="–ö–æ–Ω–∫—É—Ä—Å", color="primary")],
                #[self.button_vk(label="–ö–æ–º–∞–Ω–¥—ã", color="negative")]
                [self.button_vk(label="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", color="positive"),],
                [self.button_vk(label="–ú–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard


    def pusto(self):
        keyboard = {"buttons": [], "one_time": True}
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def menu(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                #[self.button_vk(label="–í–æ–ø—Ä–æ—Å—ã", color="positive"), self.button_vk(label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", color="positive")],
                #[self.button_vk(label="–ö–æ–Ω–∫—É—Ä—Å", color="primary")],
                #[self.button_vk(label="–ö–æ–º–∞–Ω–¥—ã", color="negative")]
                # [self.button_vk(label="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", color="positive"),
                #  self.button_vk(label="–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", color="positive")],
                # [self.button_vk(label="–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", color="primary")],
                # [self.button_vk(label="–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π", color="primary")],
                # [self.button_vk(label="–ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö", color="primary")],

                [self.button_vk(label="–ü–æ–º–æ—â—å –ø–æ –ø—Ä–∏—ë–º—É", color="positive")],
                 #self.button_vk(label="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª–ª–æ–≤", color="positive")],
                [self.button_vk(label="–ü–æ–¥–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", color="primary")],
                #[self.button_vk(label="–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π", color="primary")],
                [self.button_vk(label="–†–µ–ø–æ—Ä—Ç", color="secondary")],
                [self.button_vk(label="–ú–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_education(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç / –°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç", color="positive"),
                 self.button_vk(label="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", color="positive"),
                 self.button_vk(label="–ö–æ–ª–ª–µ–¥–∂", color="positive")],
                [self.button_vk(label="–ö–æ–º–∞–Ω–¥—ã", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_education_q(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ü–æ—Å—Ç—É–ø–∞—é –≤ –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç", color="positive")],
                 [self.button_vk(label="–ü–æ—Å—Ç—É–ø–∞—é –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É", color="positive")],
                 [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_status(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–•–æ—á—É –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –≤—É–∑", color="positive")],
                 [self.button_vk(label="–•–æ—á—É –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–æ–ª–ª–µ–¥–∂", color="positive")],
                 [self.button_vk(label="–£–∂–µ —É—á—É—Å—å –≤ –≤—É–∑–µ/–∫–æ–ª–ª–µ–¥–∂–µ", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def menu_incomplete(self, inline=False):
        keyboard = {
            "one_time": False,
            "inline": inline,
            "buttons": [
                 [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def menu_naked_survey(self, txt, inline=False):
        survey = [self.button_vk(label=f"{i}", color="positive") for i in txt]
        sp = [survey] + [[self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")]] + [[self.button_vk(label="–ú–µ–Ω—é", color="negative")]]
        keyboard = {
            "one_time": False,
            "inline": inline,
            "buttons": sp
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_where_level(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/—Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç", color="positive")],
                [self.button_vk(label="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", color="positive")],
                [self.button_vk(label="–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_where_study(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ú–æ—Å–∫–≤–∞", color="positive")],
                [self.button_vk(label="–§—Ä—è–∑–∏–Ω–æ", color="positive")],
                [self.button_vk(label="–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_choose_direction(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", color="positive")],
                 [self.button_vk(label="–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ —ç–∫–∑–∞–º–µ–Ω–∞–º", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_select_interests(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="IT –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", color="positive")],
                [self.button_vk(label="–•–∏–º–∏—è –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", color="positive")],
                [self.button_vk(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è/–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", color="positive")],
                [self.button_vk(label="–†–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", color="positive")],
                [self.button_vk(label="–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", color="positive")],
                [self.button_vk(label="–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", color="positive")],
                [self.button_vk(label="–î–∏–∑–∞–π–Ω", color="positive")],
                [self.button_vk(label="–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_type_event(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–õ–µ–∫—Ü–∏–∏", color="positive")],
                [self.button_vk(label="–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", color="positive")],
                [self.button_vk(label="–≠–∫—Å–∫—É—Ä—Å–∏–∏", color="positive")],
                [self.button_vk(label="–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã", color="positive")],
                [self.button_vk(label="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–µ —Å—É–±–±–æ—Ç—ã", color="positive")],
                [self.button_vk(label="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ò–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", color="positive")],
                [self.button_vk(label="–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π", color="positive")],
                [self.button_vk(label="–û–ª–∏–º–ø–∏–∞–¥—ã", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_interest_event(self, txt):
        keyboard = {
            "one_time": False,
            "inline": True,
            "buttons": [
                [self.button_vk(label="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", color="positive", payload=txt)]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def direction(self):
        r = "primary"
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –∏–Ω—Ñ", color=r)],
                [self.button_vk(label="–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ñ–∏–∑", color=r)],
                [self.button_vk(label="–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –æ–±—â", color=r)],
                [self.button_vk(label="–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ö–∏–º", color=r)],
                [self.button_vk(label="–†—É—Å + –æ–±—â + –∏—Å—Ç", color=r)],
                [self.button_vk(label="–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + –≥–µ–æ", color=r)],
                [self.button_vk(label="–†—É—Å + –∏–Ω—Ñ + –≥–µ–æ", color=r)],
                [self.button_vk(label="–†—É—Å + –º–∞—Ç(–ø—Ä–æ—Ñ.) + —Ç–≤–æ—Ä", color=r)],
                [self.button_vk(label="–†—É—Å + –æ–±—â + —Ç–≤–æ—Ä", color=r)],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_choose_event(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", color="positive")],
                [self.button_vk(label="–û–Ω–ª–∞–π–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", color="positive")],
                [self.button_vk(label="–û—á–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", color="positive")],
                [self.button_vk(label="–ü–æ –≤–∏–¥—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_open_day(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", color="positive")],
                [self.button_vk(label="–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å", color="positive")],
                [self.button_vk(label="–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω", color="positive")],
                [self.button_vk(label="–¢–æ–ª—å–∫–æ –æ—á–Ω—ã–µ", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def level_focus_open_day(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="IT –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", color="positive")],
                [self.button_vk(label="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–±–æ—Ä–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ", color="positive")],
                [self.button_vk(label="–ö–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∞, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", color="positive")],
                [self.button_vk(label="–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", color="positive")],
                [self.button_vk(label="–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", color="positive")],
                [self.button_vk(label="–•–∏–º–∏—è –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", color="positive")],
                [self.button_vk(label="–†–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", color="positive")],
                [self.button_vk(label="–î–∏–∑–∞–π–Ω", color="positive")],
                #[self.button_vk(label="–ö–æ–ª–ª–µ–¥–∂", color="positive")],
                [self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")],
                [self.button_vk(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", color="negative")]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def generations_keyboard(self, list_k):

        list_n = []
        for i in list_k:
            if "—à–∞–≥ –Ω–∞–∑–∞–¥" not in i[1].lower():
                txt = i[1]
                if len(i[1]) > 40:
                    txt = str(i[1][:37]) + "..."
                list_n.append([self.button_vk(label=txt, color="positive")])
        list_n.append([self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")])

        keyboard = {
            "one_time": False,
            "buttons": list_n
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def generations_keyboard_unban(self, list_k):

        list_n = []
        for i in list_k:
            if "—à–∞–≥ –Ω–∞–∑–∞–¥" not in i.lower():
                list_n.append([self.button_vk(label=i, color="positive")])
        list_n.append([self.button_vk(label="–®–∞–≥ –Ω–∞–∑–∞–¥", color="secondary")])

        keyboard = {
            "one_time": False,
            "buttons": list_n
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def keyboard_warn(self, tex):
        r = "primary"
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–ó–∞–≤–∞—Ä–Ω–∏—Ç—å", color="positive", payload=tex+"@wr"),
                 self.button_vk(label="–ë–ê–ù", color="positive", payload=tex+"@bn")],
                [self.button_vk(label="–ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–Ω", color="negative", payload=tex+"@gl")]
            ],
            "inline": True
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def keyboard_unban(self, tex):
        r = "primary"
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–†–∞–∑–±–∞–Ω–∏—Ç—å", color="positive", payload=tex+"@unban")],
                [self.button_vk(label="–ù–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å", color="negative", payload=tex+"@ban")]
            ],
            "inline": True
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def keyboard_answer_admin(self, tex):
        r = "primary"
        keyboard = {
            "one_time": False,
            "buttons": [
                [self.button_vk(label="–û—Ç–≤–µ—Ç–∏—Ç—å", color="positive", payload=tex)]
            ],
            "inline": True
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard


    def keyboard_empty(self):
        r = "primary"
        keyboard = {
            "one_time": False,
            "buttons": []
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def competition(self, f):
        if f == 0:
            spis = [
                [self.button_vk(label="–î–æ–±–∞–≤–∏—Ç—å –°–ù–ò–õ–°/—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä", color="positive")],
                [self.button_vk(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", color="positive")],
                [self.button_vk(label="–ö–æ–º–∞–Ω–¥—ã", color="negative")]
            ]
        elif f == 1:
            spis = [
                [self.button_vk(label="–ú–æ—è —Å–∏—Ç—É–∞—Ü–∏—è", color="positive")],
                [self.button_vk(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", color="positive")],
                [self.button_vk(label="–ò–∑–º–µ–Ω–∏—Ç—å –°–ù–ò–õ–°/—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä", color="positive")],
                [self.button_vk(label="–ö–æ–º–∞–Ω–¥—ã", color="negative")]
            ]
        keyboard = {
            "one_time": False,
            "buttons": spis
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        return keyboard

    def answer_msg(self):
        msg = {
            "conversation_message_ids": [self.conversation_message_id],
            "peer_id": self.peer_id,
            "is_reply": True
        }
        msg = json.dumps(msg, ensure_ascii=False).encode('utf-8')
        msg = str(msg.decode('utf-8'))
        return msg

    def answer_msg_other(self):
        msg = {
            "conversation_message_ids": [self.conversation_message_id],
            "peer_id": self.peer_id,
        }
        msg = json.dumps(msg, ensure_ascii=False).encode('utf-8')
        msg = str(msg.decode('utf-8'))
        return msg

    def answer_msg_other_parameters(self, peer_id, conversation_message_id):
        msg = {
            "conversation_message_ids": [conversation_message_id],
            "peer_id": peer_id,
        }
        msg = json.dumps(msg, ensure_ascii=False).encode('utf-8')
        msg = str(msg.decode('utf-8'))
        return msg

    def answer_msg_parameters(self, peer_id, conversation_message_id):
        msg = {
            "conversation_message_ids": [conversation_message_id],
            "peer_id": peer_id,
            "is_reply": True
        }
        msg = json.dumps(msg, ensure_ascii=False).encode('utf-8')
        msg = str(msg.decode('utf-8'))
        return msg



    def chunks(self, l, n):
        for i in range(0, len(l), n):
            yield l[i:i + n]

    # –∏—â–µ–º —Ñ–æ—Ç–æ –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ json
    async def photo_r_json(self, data):
        photo = max(data, key=lambda x: x['width'] * x['height'])
        return photo

    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω –∏–º–µ–Ω–∏
    async def opredel_skreen(self, g, text):
        if "vk.com/" in str(text):
            r = re.findall(r'/\w+.\w+', g)
            t = r[-1]
            t = t[1:]
            return t

        elif "[id" in str(text) or "[club" in str(text):
            l = g.find('|')
            l2 = g.find('id')
            k = g[:l]
            k2 = k[l2 + 2:]
            k = k[1:]
            k = k.replace("club", "")
            k = k.replace("id", "")
            if "[club" in str(text):
                k = "-" + str(k)
            return k
        return False

    def chat_id(self):
        return str(int(self.peer_id) - 2000000000)


    def chat_id_param(self, per_id):
        return str(int(per_id) - 2000000000)

    def is_int(self, s):
        try:
            int(s)
            return True
        except:
            return False


    # –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ \n
    async def txt_warn(self, g):
        l = g.find('\n')
        if l == -1:
            return ''
        k = g[l:]
        k = k.replace(".", " ")
        k = k.replace("\n", "")
        k = k.lstrip()
        return k

    # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥—ã
    async def preobrz(self, vre):
        g = vre.lower().split(" ")
        # print(g)
        for i, item in enumerate(g):
            if "–º–∏–Ω" or "—á–∞—Å" or "–¥–µ–Ω—å" or "–≥–æ–¥" or "–ª–µ—Ç" or "–¥–Ω–µ" or "–¥–Ω" in item:
                if self.is_int(g[i - 1]):
                    if "–º–∏–Ω" in item:
                        sek = int(g[i - 1]) * 60
                        return sek
                    elif "—á–∞—Å" in item:
                        sek = int(g[i - 1]) * 3600
                        return sek
                    elif "–¥–µ–Ω" in vre or "–¥–Ω–µ" in item or "–¥–Ω" in item:
                        sek = int(g[i - 1]) * 86400
                        return sek
                    elif "–≥–æ–¥" in item or "–ª–µ—Ç" in item:
                        sek = int(g[i - 1]) * 31536000
                        return sek
        return 86400


    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
    async def display_time(self, seconds, granularity=2):
        intervals = (
            ('weeks', 604800),  # 60 * 60 * 24 * 7
            ('days', 86400),  # 60 * 60 * 24
            ('hours', 3600),  # 60 * 60
            ('minutes', 60),
            ('seconds', 1),
        )
        result = []

        for name, count in intervals:
            value = seconds // count
            if value:
                seconds -= value * count
                if value == 1:
                    name = name.rstrip('s')
                result.append("{} {}".format(value, name))
        return ', '.join(result[:granularity])

    async def getting_user_id(self):

        if "reply_message" in self.message or self.fwd_messages != []:
            if "reply_message" in self.message:
                user_id = self.message["reply_message"]["from_id"]
            else:
                user_id = self.fwd_messages[0]["from_id"]
            if self.is_int(user_id):
                user_id = str(user_id)
                return user_id
            else:
                return False
        elif len(self.text.lower().split(' ')) > 1:
            if "vk.com/" in self.text.lower():
                t = await self.opredel_skreen(self.text.lower().split(' ')[1], self.text.lower())
                # test = await vk.api.utils.resolve_screen_name(screen_name=t)
                test = await self.apis.api_post("utils.resolveScreenName", v=self.v, screen_name=t)
                if test["type"] == "group":
                    user_id = "-" + str(test["object_id"])
                else:
                    user_id = test["object_id"]
                if self.is_int(user_id):
                    user_id = str(user_id)
                    return user_id
                else:
                    return False
            elif "[id" in str(self.text.lower()) or "[club" in str(self.text.lower()):
                opt = re.sub(r'^\w\s', '', self.text.lower())
                text_list = opt.split(' ')
                user_id = None
                for i in text_list:
                    if "[id" in i or "[club" in i:
                        user_id = await self.opredel_skreen(i, self.text.lower())
                        if not user_id:
                            break
                #user_id = await self.opredel_skreen(i, self.text.lower())
                if self.is_int(user_id):
                    user_id = str(user_id)
                    return user_id
                else:
                    return False
        return False


    async def getting_number(self):
        try:
            s = [int(s) for s in re.findall(r'-?\d+\.?\d*', self.text.lower())]
            for i in s:
                if i < 20:
                    return i
            return 1
        except:
            return 1

    async def getting_user_id_fwd(self):
        if "reply_message" in self.message or self.fwd_messages != []:
            if "reply_message" in self.message:
                user_id = self.message["reply_message"]["from_id"]
            else:
                user_id = self.fwd_messages[0]["from_id"]
            if self.is_int(user_id):
                user_id = str(user_id)
                return user_id
            else:
                return False

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞—á–∏–≤–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
    async def txt_achievement(self, txt):
        txt_list = txt.split(" ")
        if "[id" in str(txt.lower()) or "[club" in str(txt.lower()) or "vk.com/" in txt.lower():
            del txt_list[0]
            del txt_list[0]
            l = len(txt_list) - 1
            kol = txt_list[l]
            del txt_list[l]
            return " ".join(txt_list), kol
        else:
            del txt_list[0]
            l = len(txt_list) - 1
            kol = txt_list[l]
            del txt_list[l]
            return " ".join(txt_list), kol

    async def txt_roulette(self, txt):
        txt_list = txt.split(" ")
        if len(txt_list) > 1:
            #del txt_list[0]
            kol = txt_list[1]
            return kol
        else:
            kol = False
            return kol


    async def ls_open_check(self, fr_id):
        res = await self.apis.api_post("messages.isMessagesFromGroupAllowed", v=self.v, group_id=self.club_id,
                                       user_id=fr_id)
        if res["is_allowed"] == 1:
            return True
        else:
            return False


    # –ø–æ–∏—Å–∫ –ø–æ html
    def fin(self, s, first, last):
        try:
            start = s.index(str(first)) + len(str(first))
            end = s.index(str(last), start)
            return s[start:end]
        except ValueError:
            return ""

    async def info_user(self, user_id, res=0, f=0):
        if str(user_id)[0] == "-":
            return "–¢–∞–∫–∏—Ö –Ω–µ –∑–Ω–∞–µ–ºü§ñ"

        warn = ""
        ban = ""
        if f == 0:
            info = await self.create_mongo.user_info(user_id, self.peer_id)
            if not info:
                return "–¢–∞–∫–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏—Ä–æ–¥–µüëΩ"

            if "count_old" in info["warn"]:
                warn = f"‚ò¢ –í–∞—Ä–Ω—ã: [{info['warn']['count']}/3]\nü§° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤: {info['warn']['count_old'] - 1}\n\n"
            if "count" in info["ban"]:
                ban = f"ü§° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤: {info['ban']['count']}\n\n"

        result = await self.apis.api_post("users.get", v=self.v, user_ids=f"{user_id}", name_case="gen")
        name = f'{result[0]["first_name"]} {result[0]["last_name"]}'

        if res == 0:
            res = await self.create_mongo.profile_users_add(user_id)


        awards = ""
        if len(res[0]) >= 1:
            if res[0][0] == "0":
                awards = f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {res[2]}\nüìä –†–µ–π—Ç–∏–Ω–≥: {res[1]}\nüëª –ê—á–∏–≤–∫–∏:\nüìõ –ê—á–∏–≤–æ–∫ –Ω–µ—Ç"
            else:
                awards = f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {res[2]}\nüìä –†–µ–π—Ç–∏–Ω–≥: {res[1]}\nüëª –ê—á–∏–≤–∫–∏:\n" + "\n".join(res[0])

        # p = requests.get('https://vk.com/foaf.php?id=' + str(self.from_id))
        # s = await api_url('https://vk.com/foaf.php?id=' + str(user_id)).get_html()
        # l = self.fin(s, "<ya:created dc:date=", "/>\n")
        # q = l[1:-7]
        # q = q[:-9]
        # q = q.replace('-', '.')
        # q = q.split(".")
        # q = str(q[2]) + "." + str(q[1]) + "." + str(q[0])
        #return f"üë§ –ü—Ä–æ—Ñ–∏–ª—å [id{user_id}|{name}]\n\nüìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {q}\n\n{warn}{ban}{awards}"
        return f"üë§ –ü—Ä–æ—Ñ–∏–ª—å [id{user_id}|{name}]\n\n{warn}{ban}{awards}"

    async def time_transformation(self, vrem):
        timestamp = int(vrem)
        value = datetime.fromtimestamp(timestamp)
        tim = value.strftime('%d.%m.%Y %H:%M')
        return tim

    async def info_reputation(self, user_id):
        await self.create_mongo.profile_users_add(user_id, reputation_minus=self.date, f=2)
        await self.create_mongo.profile_users_add(user_id, reputation_plus=self.date, f=2)
        result = await self.create_mongo.profile_users_check(user_id, self.date)
        plus = []
        j = 1
        for i in result["plus"]:
            res = await self.time_transformation(result["plus"][i])
            plus.append(f"{j}. +—Ä–µ–ø —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {res}")
            j += 1
        minus = []
        j = 1
        for i in result["minus"]:
            res = await self.time_transformation(result["minus"][i])
            minus.append(f"{j}. -—Ä–µ–ø —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {res}")
            j += 1
        resul = await self.apis.api_post("users.get", v=self.v, user_ids=f"{user_id}", name_case="gen")
        name = f'{resul[0]["first_name"]} {resul[0]["last_name"]}'
        minu = ""
        if result["count_minus"] != 0:
            minu = f"\n\nüòà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö -—Ä–µ–ø: [{result['count_minus_available']}/{result['count_minus']}]\n" \
                   + "\n".join(minus)
        msg = f"üë§ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è [id{user_id}|{name}]\n\n" \
              f"üòá –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö +—Ä–µ–ø: [{result['count_plus_available']}/{result['count_plus']}]\n" \
              + "\n".join(plus) + \
              f"{minu}"
        return msg

    async def info_rating(self, size):
        result = await self.create_mongo.rating_check()
        li = sorted(result, key=result.get, reverse=True)
        #li = list(li)
        li = li[:size]
        st = ",".join(li)
        spis = []
        resul = await self.apis.api_post("execute", code=inf_lot(from_ids=st), v=self.v)
        k = 1
        resul = list(reversed(resul))

        for i, j in zip(li, resul):
            nag = "üèê"
            if k == 1:
                nag = "ü•á"
            elif k == 2:
                nag = "ü•à"
            elif k == 3:
                nag = "ü•â"
            elif k == 4:
                nag = "üéñ"
            spis.append(f"{nag} {k}. [id{i}|{j}] ‚Äî‚Äî‚Äî {result[str(i)]}")
            k += 1
        msg = "üëë –¢–û–ü 25 –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n\n" + "\n".join(spis)
        return msg

    '''async def bind(self):
        ad = methods(self.v, self.club_id)
        adm = await ad.admin_chek(self.message)
        if adm == 1:pass'''

    async def snils_check(self, snils="0", flag=0):
        try:
            if not self.is_int(snils.replace("-", "")):
                return 0, [["–í–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–°/—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"]]

            res = await self.create_mongo.users_directions_add_finish(self.from_id, self.text, flag=flag)
            if res[0] == 1:
                return 0, [["–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –°–ù–ò–õ–°–£/—É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."]]
            elif res[0] == 2:

                return 0, [["–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –°–ù–ò–õ–°/—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä."]]
            directions_list = []
            ll = 1
            vash_new = "–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è"
            if flag == 2:
                vash_new = "–ü–æ–∑–∏—Ü–∏—è"
            bal = 0

            dat = ""
            vash = "–í–∞—à "
            vash_new_new = "–≤–∞—à–∏—Ö "
            if flag == 0:
                dat = "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã\n"
            elif flag == 2:
                vash = ""
                vash_new_new = ""


            for i in range(1, res[1]["count"] + 1):
                comment = ""
                if len(res[1][str(i)]['note']) > 0:
                    comment = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {res[1][str(i)]['note']}"
                if int(res[1][str(i)]['total_amount']) > bal:
                    bal = int(res[1][str(i)]['total_amount'])
                directions_list.append(f"{ll}. {res[2][res[1][str(i)]['code_directions']]['title']}\n"
                                       f"üêà –ö–æ–¥: {res[2][res[1][str(i)]['code_directions']]['code']}\n"
                                       f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {res[2][res[1][str(i)]['code_directions']]['plan']}\n"
                                       f"üåè {vash_new}: {res[1][str(i)]['position']}\n"
                                       f"üåê {vash_new} —Å —É—á—ë—Ç–æ–º –ø–æ–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–∏—è –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {res[1][str(i)]['position_consent']}\n"
                                       f"üë®‚Äç‚öñ –°–æ–≥–ª–∞—Å–∏–µ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {res[1][str(i)]['consent']}\n"
                                       f"üë§ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö: "
                                       f"https://priem.mirea.ru/accepted-entrants-list/personal_code_rating.php?competition="
                                       f"{res[1][str(i)]['code_directions']}&highlight={res[1][str(i)]['user_id']}"
                                       f"{comment}")
                ll += 1
            msg = f"{dat}‚è∞ {res[3]}\nüíé {vash}–°–ù–ò–õ–°/—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {res[1]['snils']}\n" \
                  f"üíø –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ —Å —É—á—ë—Ç–æ–º –ò–î: {bal}\n" \
                  f"üìù –°–ø–∏—Å–æ–∫ {vash_new_new}–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n\n"
            directions_list.insert(0, msg)
            de = self.chunks(directions_list, 5)
            l = list(de)
            # dat = ""
            # vash = "–í–∞—à "
            # vash_new_new = "–≤–∞—à–∏—Ö "
            # if flag == 0:
            #     dat = "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã\n"
            # elif flag == 2:
            #     vash = ""
            #     vash_new_new = ""
            # msg = f"{dat}‚è∞ {res[3]}\nüíé {vash}–°–ù–ò–õ–°/—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {res[1]['snils']}\n" \
            #       f"üíø –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ —Å —É—á—ë—Ç–æ–º –ò–î: {bal}\n" \
            #       f"üìù –°–ø–∏—Å–æ–∫ {vash_new_new}–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n\n"\
            #       +"\n\n".join(directions_list)
            self.create_mongo.add_user(self.peer_id, 0)

            return 1, l
        except Exception as e:
            print(traceback.format_exc())



    async def ban_rating(self, user_id, from_id, bal, peer_id, cause, vrem):
        if bal <= -50:
            res_new = await self.create_mongo.globan_add(user_id, vrem, from_id, "–†–µ–π—Ç–∏–Ω–≥ –¥–æ—Å—Ç–∏–≥ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∏–∂–µ -50")
            if res_new[0] == 1:
                msg = f"–î–∞–Ω–Ω—ã–π [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–Ω.\n\n" \
                      f"üìù –ü—Ä–∏—á–∏–Ω–∞: –†–µ–π—Ç–∏–Ω–≥ –¥–æ—Å—Ç–∏–≥ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∏–∂–µ -50.\n\n" \
                      f"P.S. –û—Ç—Ç—É–¥–∞ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è..."
                return True, msg, res_new[1]
            elif res_new[0] == 2:
                msg = f"–î–∞–Ω–Ω—ã–π [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É–∂–µ –µ—Å—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –±–∞–Ω–µ.\n\n" \
                      f"P.S. –ò –æ–Ω –æ—Ç—Ç—É–¥–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—ë—Ç—Å—è..."
                return True, msg, res_new[1]

        elif bal <= -30:
            timestamp = 604800 + int(vrem)
            value = datetime.fromtimestamp(timestamp)
            time = value.strftime('%d.%m.%Y %H:%M')
            res_ban = await self.create_mongo.ban_check(user_id, peer_id, cause, 604800 + vrem, vrem, from_id)
            res = await record_achievements(self.create_mongo, user_id).run(kol_ban=res_ban)
            msg_n = ""
            if res[1]:
                msg_n = "\n\nüëª –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞—á–∏–≤–∫–∏:\n" + "\n".join(res[1])
            ply = await self.display_time(604800)
            result = await self.apis.api_post("users.get", v=self.v, user_ids=f"{user_id}", name_case="gen")
            name = f'{result[0]["first_name"]} {result[0]["last_name"]}'
            msg = f"{name}, –≤–∞–º –±–∞–Ω –Ω–∞ {ply}\nüìù –ü—Ä–∏—á–∏–Ω–∞: –†–µ–π—Ç–∏–Ω–≥ –¥–æ—Å—Ç–∏–≥ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∏–∂–µ -30\n‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time}\n\n" \
                  f"üéÅ –£ –≤–∞—Å –µ—Å—Ç—å –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –Ω–∞ –æ–¥–Ω—É –±–µ—Å–µ–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è '—Ä–∞–∑–±–∞–Ω' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.{msg_n}\n\nüìä –†–µ–π—Ç–∏–Ω–≥: {bal}"
            return True, msg

        return False

    async def get_event_interest(self, event_id=None, count=10, offset=0):
        res = await api_url("https://priem.mirea.ru/lk/api/events/get").get_json()
        msg = []
        kk = 0
        flag = False
        if event_id:
            txt = event_id
        else:
            txt = self.direction_id[self.text]
        for i in res:
            if i["event_direction_id"] and i["event_direction_id"] != "null":
                if i["event_direction_id"] == int(txt):
                    if kk == count + offset:
                        kk += 1
                        break
                    kk += 1
                    if kk <= offset:
                        continue
                    address = ""
                    if i["is_online"] != 1:
                        address = f"üåç –ê–¥—Ä–µ—Å: {i['address']}\n"
                        format_event = "üè§ –§–æ—Ä–º–∞—Ç: –û—á–Ω–æ"
                    else:
                        format_event = "üè° –§–æ—Ä–º–∞—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"
                    msg.append(f"üîÆ {i['title']}\n‚åö –ö–æ–≥–¥–∞: {i['date_readable']} –≤ {i['time_readable']}\n{format_event}\n"
                               f"{address}"
                               f"üí° –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: https://priem.mirea.ru/event?event_id={i['id']}")
        if kk - offset == 11:
            flag = True
        if not msg:
            msg = ["üò™ –£–≤—ã, –ø–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∑–¥–Ω–µ–µ.\n\n"
                   "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:\nhttps://priem.mirea.ru/events/"]
        return msg, flag, f"direction&{txt}"

    async def get_event_online_offline(self, count=10, offset=0, is_online=False):
        res = await api_url("https://priem.mirea.ru/lk/api/events/get").get_json()
        msg = []
        kk = 0
        flag = False
        sr = 0
        if is_online:
            sr = 1
        for i in res:
            if i["event_direction_id"] and i["event_direction_id"] != "null":
                if i["is_online"] == sr:
                    if kk == count + offset:
                        kk += 1
                        break
                    kk += 1
                    if kk <= offset:
                        continue
                    address = ""
                    if i["is_online"] != 1:
                        address = f"üåç –ê–¥—Ä–µ—Å: {i['address']}\n"
                        format_event = "üè§ –§–æ—Ä–º–∞—Ç: –û—á–Ω–æ"
                    else:
                        format_event = "üè° –§–æ—Ä–º–∞—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"
                    msg.append(
                        f"üîÆ {i['title']}\n‚åö –ö–æ–≥–¥–∞: {i['date_readable']} –≤ {i['time_readable']}\n{format_event}\n"
                        f"{address}"
                        f"üí° –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: https://priem.mirea.ru/event?event_id={i['id']}")
        if kk - offset == 11:
            flag = True
        if not msg:
            msg = ["üò™ –£–≤—ã, –ø–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∑–¥–Ω–µ–µ.\n\n"
                   "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:\nhttps://priem.mirea.ru/events/"]
        return msg, flag, f"online&{sr}"

    async def get_open_day_online_offline(self, event_id=15, count=10, offset=0, is_online=False):
        res = await api_url("https://priem.mirea.ru/lk/api/events/get").get_json()
        msg = []
        kk = 0
        flag = False
        sr = 0
        if is_online:
            sr = 1
        if event_id:
            txt = event_id
        else:
            txt = self.event_id[self.text]
        for i in res:
            if i["type"]["id"] == int(txt) and i["is_online"] == sr:
                if kk == count + offset:
                    kk += 1
                    break
                kk += 1
                if kk <= offset:
                    continue
                address = ""
                if i["is_online"] != 1:
                    address = f"üåç –ê–¥—Ä–µ—Å: {i['address']}\n"
                    format_event = "üè§ –§–æ—Ä–º–∞—Ç: –û—á–Ω–æ"
                else:
                    format_event = "üè° –§–æ—Ä–º–∞—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"
                msg.append(
                    f"üîÆ {i['title']}\n‚åö –ö–æ–≥–¥–∞: {i['date_readable']} –≤ {i['time_readable']}\n{format_event}\n"
                    f"{address}"
                    f"üí° –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: https://priem.mirea.ru/event?event_id={i['id']}")
        if kk - offset == 11:
            flag = True
        if not msg:
            msg = ["üò™ –£–≤—ã, –ø–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∑–¥–Ω–µ–µ.\n\n"
                   "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:\nhttps://priem.mirea.ru/events/"]
        return msg, flag, f"open_day_online&{sr}"

    async def get_event_type(self, event_id=None, count=10, offset=0):
        res = await api_url("https://priem.mirea.ru/lk/api/events/get").get_json()
        msg = []
        kk = 0
        flag = False
        if event_id:
            txt = event_id
        else:
            txt = self.event_id[self.text]
        for i in res:
            if i["type"]["id"] == int(txt):
                if kk == count + offset:
                    kk += 1
                    break
                kk += 1
                if kk <= offset:
                    continue
                address = ""
                if i["is_online"] != 1:
                    address = f"üåç –ê–¥—Ä–µ—Å: {i['address']}\n"
                    format_event = "üè§ –§–æ—Ä–º–∞—Ç: –û—á–Ω–æ"
                else:
                    format_event = "üè° –§–æ—Ä–º–∞—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"
                msg.append(
                    f"üîÆ {i['title']}\n‚åö –ö–æ–≥–¥–∞: {i['date_readable']} –≤ {i['time_readable']}\n{format_event}\n"
                    f"{address}"
                    f"üí° –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: https://priem.mirea.ru/event?event_id={i['id']}")
        if kk - offset == 11:
            flag = True
        if not msg:
            msg = [
                "üò™ –£–≤—ã, –ø–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∑–¥–Ω–µ–µ.\n\n"
                "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:\nhttps://priem.mirea.ru/events/"]
        return msg, flag, f"event&{txt}"

    async def get_choice_focus_open_day(self):
        txt = self.choice_focus_open_day_id.get(self.text)
        msg = []
        if txt:
            msg = []
            for j in txt:
                res = await api_url(f"{j}").get_json()
                address = ""
                if res["is_online"] != 1:
                    address = f"üåç –ê–¥—Ä–µ—Å: {res['address']}\n"
                    format_event = "üè§ –§–æ—Ä–º–∞—Ç: –û—á–Ω–æ"
                else:
                    format_event = "üè° –§–æ—Ä–º–∞—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"
                msg.append(
                    f"üîÆ {res['title']}\n‚åö –ö–æ–≥–¥–∞: {res['date_readable']} –≤ {res['time_readable']}\n{format_event}\n"
                    f"{address}"
                    f"üí° –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: https://priem.mirea.ru/event?event_id={res['id']}")
        if not msg:
            msg = [
                "üò™ –£–≤—ã, –ø–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∑–¥–Ω–µ–µ.\n\n"
                "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:\nhttps://priem.mirea.ru/events/"]
        return msg, False, f"event&{txt}"

    async def strategic_directions(self, place=None, strategic_id=None, level=None, count=10, offset=0):
        res = await api_url("https://priem.mirea.ru/lk/api/directions/get").get_json()
        msg = []
        kk = 0
        flag = False
        if strategic_id:
            txt = strategic_id
        else:
            txt = self.strategic_directions_id[self.text]
        for i in res:
            if i["strategic_direction_id"] == int(txt) and str(i['location_id']) == str(place) and str(i['education_level_id']) == str(level):
                if kk == count + offset:
                    kk += 1
                    break
                kk += 1
                if kk <= offset:
                    continue
                    #de = self.chunks(spis, 10)
                    #l = list(de)
                    # print(len(l))
                    # print(l)

                    #ff = 1
                perv = "üîé –í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
                #if pol_sql["quantity"] == -1:
                    #perv = "üîé –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–æ –Ω–∞ –±—é–¥–∂–µ—Ç –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –±–∞–ª–ª—ã –±—ã–ª–∏ –≤—ã—à–µ.\n\n"
                f = 1
                msg.append(
                           f"üîÆ {i['program']} {i['code']}\n"
                           f"üìä –ü—Ä–æ—à–ª–æ–≥–æ–¥–Ω–∏–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –Ω–∞ –±—é–¥–∂–µ—Ç: {i['last_year_threshold']}\n"
                           f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {i['places_budget']}\n"
                           f"–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: https://priem.mirea.ru/guide-direction?direction_id={i['id']}")
        if kk - offset == 11:
            flag = True
        if not msg:
            msg = ["üò™ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."]
            return msg, False, f"strategic&{txt}&{place}&{level}"
        return msg, flag, f"strategic&{txt}&{place}&{level}"


    async def strategic_directions_exam(self, exam=None, place=None, level=None, count=10, offset=0):
        res = await api_url("https://priem.mirea.ru/lk/api/directions/get").get_json()
        msg = []
        kk = 0
        flag = False
        if exam:
            txt = [int(i) for i in exam.strip('[]').replace(' ', '').split(',')]
        else:
            txt = self.subjects_opposite_id[self.text]
        for i in res:
            if str(i['location_id']) == str(place) and str(i['education_level_id']) == str(level):
                ss = []
                for j in i["guide_exams"]:
                    ss.append(j["id"])
                if all(x in ss for x in txt):
                #if sorted(ss) == sorted(txt):

                    if kk == count + offset:
                        kk += 1
                        break
                    kk += 1
                    if kk <= offset:
                        continue
                        #de = self.chunks(spis, 10)
                        #l = list(de)
                        # print(len(l))
                        # print(l)

                        #ff = 1
                    perv = "üîé –í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
                    #if pol_sql["quantity"] == -1:
                        #perv = "üîé –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–æ –Ω–∞ –±—é–¥–∂–µ—Ç –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –±–∞–ª–ª—ã –±—ã–ª–∏ –≤—ã—à–µ.\n\n"
                    f = 1
                    msg.append(
                               f"üîÆ {i['program']} {i['code']}\n"
                               f"üìä –ü—Ä–æ—à–ª–æ–≥–æ–¥–Ω–∏–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –Ω–∞ –±—é–¥–∂–µ—Ç: {i['last_year_threshold']}\n"
                               f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {i['places_budget']}\n"
                               f"–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: https://priem.mirea.ru/guide-direction?direction_id={i['id']}")
        if kk - offset == 11:
            flag = True
        if not msg:
            msg = ["üò™ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."]
            return msg, False, f"strategic_exam&{txt}&{place}&{level}"
        return msg, flag, f"strategic_exam&{txt}&{place}&{level}"


    async def step_back_bool(self):
        res = await self.create_mongo.get_users_ls_status(self.from_id)
        if res:
            if res in command_ls_dictionary:
                #print(command_ls_dictionary[f"{res}"][1].parent)
                if command_ls_dictionary[f"{res}"][1].parent:
                    await self.create_mongo.add_users_ls_status(self.from_id,
                                                                command_ls_dictionary[f"{res}"][1].parent.name)
                    return True
        return False

    async def step_back_bool_new(self, res=None, work_ls=None):
        #res = await self.create_mongo.get_users_ls_status(self.from_id)
        if res.location_tree:
            if res.location_tree in command_ls_dictionary:
                #print(command_ls_dictionary[f"{res}"][1].parent)
                if command_ls_dictionary[f"{res.location_tree}"][1].parent:
                    await work_ls.location_tree_update()
                    # await self.create_mongo.add_users_ls_status(self.from_id,
                    #                                             command_ls_dictionary[f"{res}"][1].parent.name)
                    return True
        return False


if __name__ == "__main__":


    from api import api
    # ss = {}
    # kol = 0
    # bs_list = [2000000027, 2000000036, 2000000028, 2000000029, 2000000035, 2000000037, 2000000032, 2000000033, 2000000031, 2000000030]
    # for l in bs_list:
    #     loop = asyncio.get_event_loop()
    #     s = loop.run_until_complete(api(0,
    #                                     '377cd52004220eafa956bbdbaabe9383a53820c1fa2b53cc4e14490eefa66c179d1edf2a0cb6c467fab6f').api_post(
    #         'messages.search', q='', peer_id=l, v='5.131', count=100))
    #     #pprint.pprint(s)
    #     k = 0
    #     for j in range(0, s['count'], 100):
    #         s = loop.run_until_complete(api(0,
    #                                         '377cd52004220eafa956bbdbaabe9383a53820c1fa2b53cc4e14490eefa66c179d1edf2a0cb6c467fab6f').api_post(
    #             'messages.search', q='', peer_id=l, v='5.131', count=100, offset=j))
    #         #pprint.pprint(s)
    #         for i in s['items']:
    #             if i['from_id'] == -5411326:
    #                 if i['text'] > 100:
    #                     k += 1
    #             #print(i['text'])
    #             #if '—Ö–æ—Ä–æ—à–µ–≥–æ' in i['text']:
    #                 #k += 1
    #     ss[l] = k
    #     kol += k
    # #print(k)
    # print(ss, kol)

    ss = {}
    kol = 0
    kol_all = 0
    bs_list = [2000000027, 2000000036, 2000000028, 2000000029, 2000000035, 2000000037, 2000000032, 2000000033,
               2000000031, 2000000030]

    for l in range(2000000055, 20000000100):
        loop = asyncio.get_event_loop()
        s = loop.run_until_complete(api(0,
                                        '918157cf8a3d1e91cf0d17e3f04cebacecb2b513093798b2e73d2f97c6ac978cf4d1ec456c551db5ef9b8').api_post(
            "messages.send", v='5.131', peer_id=l,
                                         message="–Ω–∞—á–Ω—ë–º", random_id=0))
    # for l in bs_list:
    #     loop = asyncio.get_event_loop()
    #     s = loop.run_until_complete(api(0,
    #                                     '377cd52004220eafa956bbdbaabe9383a53820c1fa2b53cc4e14490eefa66c179d1edf2a0cb6c467fab6f').api_post(
    #         'messages.getHistory', peer_id=l, v='5.131', count=200))
    #     #pprint.pprint(s)
    #     #break
    #     k = 0
    #     j = 0
    #     #while len(s) != 0:
    #     kol_all += s['count']
    #     for j in range(0, s['count'], 200):
    #         s = loop.run_until_complete(api(0,
    #                                         '377cd52004220eafa956bbdbaabe9383a53820c1fa2b53cc4e14490eefa66c179d1edf2a0cb6c467fab6f').api_post(
    #             'messages.getHistory', peer_id=l, v='5.131', count=200, offset=j))
    #         # pprint.pprint(s)
    #         for i in s['items']:
    #             #print(i['from_id'])
    #             if i['from_id'] == -5411326:
    #                 if len(i['text']) > 100:
    #                     k += 1
    #             # print(i['text'])
    #             # if '—Ö–æ—Ä–æ—à–µ–≥–æ' in i['text']:
    #             # k += 1
    #         time.sleep(0.1)
    #
    #     ss[l] = k
    #     kol += k
    #     print(kol_all)
    #     print(ss, kol)
    # print(kol_all)
    # print(ss, kol)



    #text = {}
    #print(text[1:])
    # –ø–æ–∏—Å–∫ –ø–æ html
    # def fin(s, first, last):
    #     try:
    #         start = s.index(str(first)) + len(str(first))
    #         end = s.index(str(last), start)
    #         return s[start:end]
    #     except ValueError:
    #         return ""
    # import requests
    # #s = requests.get('https://vk.com/foaf.php?id=' + str(260671468))
    # #s = s.
    # loop = asyncio.get_event_loop()
    # s = loop.run_until_complete(api_url('https://vk.com/foaf.php?id=' + str(354930228)).get_html())
    # l = fin(s, "<ya:created dc:date=", "/>\n")
    # q = l[1:-7]
    # q = q[:-9]
    # q = q.replace('-', '.')
    # q = q.split(".")
    # q = str(q[2]) + "." + str(q[1]) + "." + str(q[0])
    # print(q)




    # def getting_number(text):
    #     try:
    #         s = [int(s) for s in re.findall(r'-?\d+\.?\d*', text.lower())]
    #         return s[0]
    #     except:
    #         return 1
    #
    #
    # print(getting_number("–û—Å—É–∂–¥–∞—é"))


    # import re
    #
    # sentence = "+rep 2"
    # #d = re.findall('\d', '25BNKLOPY5T')
    # s = [int(s) for s in re.findall(r'-?\d+\.?\d*', sentence)]
    # print(s)
    # def opredel_skreen(g, text):
    #     if "vk.com/" in str(text):
    #         r = re.findall(r'/\w+.\w+', g)
    #         t = r[-1]
    #         t = t[1:]
    #         return t
    #
    #     elif "[id" in str(text) or "[club" in str(text):
    #         l = g.find('|')
    #         l2 = g.find('id')
    #         k = g[:l]
    #         k2 = k[l2 + 2:]
    #         k = k[1:]
    #         k = k.replace("club", "")
    #         k = k.replace("id", "")
    #         if "[club" in str(text):
    #             k = "-" + str(k)
    #     return k
    #
    #
    # def getting_user_id(text):
    #     if "[id" in str(text.lower()) or "[club" in str(text.lower()):
    #         opt = re.sub(r'^\w\s', '', text.lower())
    #         text_list = opt.split(' ')
    #         user_id = None
    #         for i in text_list:
    #             #print(i)
    #             if "[id" in i or "[club" in i:
    #                 user_id = opredel_skreen(i, text.lower())
    #                 print(user_id)
    #                 if not user_id:
    #                     break
    #         # user_id = await self.opredel_skreen(i, self.text.lower())
    #         # if self.is_int(user_id):
    #         #     user_id = str(user_id)
    #         #     return user_id
    #         # else:
    #         #     return False
    #         return user_id
    #     return False

    #print(getting_user_id("+—Ä–µ–ø [id24434334|batteb])"))